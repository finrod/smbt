(* vim: set et ts=4: *)
(* Smbt, an SML build tool
 *  Copyright (c) 2012 Filip Sieczkowski & Gian Perrone
 * 
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both the copyright notice and this permission notice and warranty
 * disclaimer appear in supporting documentation, and that the name of
 * the above copyright holders, or their entities, not be used in
 * advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission.
 * 
 * The above copyright holders disclaim all warranties with regard to
 * this software, including all implied warranties of merchantability and
 * fitness. In no event shall the above copyright holders be liable for
 * any special, indirect or consequential damages or any damages
 * whatsoever resulting from loss of use, data or profits, whether in an
 * action of contract, negligence or other tortious action, arising out
 * of or in connection with the use or performance of this software.
 *
*)

structure MLKitCompiler :> COMPILER =
struct
    open CompilerUtil
    structure S = String

    val name = "MLKit"

    fun assert p failmsg = if p () then ()
                           else raise Fail failmsg

    val concatWS = S.concatWith " "
  
    val maybe = Option.getOpt

    fun genMLB file srcs =
      let
        val mlb = TextIO.openOut file
      in
        TextIO.output (mlb,
          concatWS ( ["(* Generated by smbt. Do not edit. *)\n"]
                   @ srcs
                   @ ["\n"] ));
        TextIO.closeOut mlb
      end

    fun compile' (srcs,ffisrcs,lnkopts,cflags,hdr,opts) output =
        let
            val _ = print " - Invoking MLKit\n"

            val cc       = maybe (selectOpt opts "cc", "cc")
            val smlflags = maybe (selectOpt opts "smlflags", "")
            val mlkit    = maybe (selectOpt opts "mlkit", "mlkit")

            val () = assert (fn()=> List.all (S.isSuffix ".c") ffisrcs)
                            "*.c required for MLKit FFI"

            val genFile = tempdir () ^ "/smbt-build.mlb"
            val () = genMLB genFile (map absolutePath srcs)

            val () = app (fn src =>
                            let
                              val out = S.substring(src, 0, size src-2) ^ ".o"
                              val command = concatWS [cc, concatWS cflags, "-c", src, "-o", out]
                            in
                              print (command ^ "\n");
                              exec command
                            end)
                         ffisrcs

            val useFFI = ffisrcs <> [] orelse isSome (selectOpt opts "libs")

            val libs = maybe (selectOpt opts "libs", "")
            val ffilib = if ffisrcs <> []
                         then SOME (OS.Path.file (S.substring(hd ffisrcs, 0, size (hd ffisrcs)-2)))
                         else NONE

            val () =
              if useFFI
              then
                let
                  fun to_obj src = S.substring(src, 0, size src-2) ^ ".o"
                  val objs = map to_obj ffisrcs
                  val command = concatWS (["ar r", "lib"^valOf ffilib^".a"] @ objs)
                in
                  exec command
                end
              else ()

            val libdirs =
              case selectOpt opts "libdirs"
                of SOME dirs => ".,"^dirs
                 | NONE      => "."

            val libopts =
              if useFFI
              then ["-libdirs", libdirs, "-libs", S.concatWith "," ["m","c","dl",libs,valOf ffilib]]
              else []

            val cmd = concatWS
               ([ mlkit
                , "--output", output
                ]
                @ libopts
                @ lnkopts
                @ [smlflags]
                @ [genFile])
        in
(*        print ("cmd:"^cmd'^"\n"); *)
          exec cmd;
          print (" - Output: " ^ statFile output ^ "\n")
        end

    fun compile (c as (srcs,ffisrcs,lnkopts,cflags,hdr,opts)) =
        case selectOpt opts "output" of
                SOME output => compile' c output
              | NONE => raise Fail ("Compiler invoked with no output.\n")

    fun interactive (c as (srcs,ffisrcs,lnkopts,cflags,hdr,opts)) =
            raise Fail ("MLKit cannot be used in interactive mode.")

end


